# ==============================================================================
# This file contains the main windowing code for SE
# ==============================================================================

"""
SE - colony.py

Created by Peter May on 2015-02-19.

This file contains the initial code for a colony

written by -        Peter May a-pemay@microsoft.com

"""


class Colony():
    # ==============================================================================
    # Initialisation
    # ==============================================================================
    def __init__(self, i_population=0, i_level=1):
        """
        initialise the colony with a population and a level
        :param i_population:    the population of the colony
        :param i_level:         the colony level (outpost,colony, settlement)
        :type i_population: int
        :type i_level: int
        """
        # variables
        self.m_population = i_population
        self.m_level = i_level
        self.m_production = 0.0
        self.m_tax = 0.0

    # ==============================================================================
    # Behaviour
    # ==============================================================================
    def colonize(self, i_pop_boost, i_level):
        """
        colonize the colony - upgrade the development level and boost population
        :param i_pop_boost:
        :param i_level:
        :type i_pop_boost: int
        :type i_level: int
        """
        # increase the colony level
        if i_level > self.m_level:
            self.m_level = i_level

        # and add on the population
        self.m_population += i_pop_boost

        # set the production output
        self.m_production = float(self.m_population) / 10.0

        # set the tax output
        self.m_tax = float(self.m_population) / 100.0

    def simulate(self):
        """
        simulate the colony, grow naturally and produce money

        """
        # increase population
        self.grow_population()

        # set the production output
        self.m_production = float(self.m_population) / 10.0

        # set the tax output
        self.m_tax = float(self.m_population) / 100.0

    def grow_population(self):
        """
        grow the population of the colony
        """
        # set the new pop to the old one
        new_pop = float(self.m_population)

        # then multiply it by a value between 1 and 1.2
        new_pop *= 1.2-(float(self.m_population)/float(self.sustainable_pop))/5.0

        # and set it
        self.m_population = int(new_pop)

    # ==============================================================================
    #  Get/Set
    # ==============================================================================
    @property
    def sustainable_pop(self):
        """
        :return: the maximum population supported by the colony
        :rtype : int
        """
        return self.m_level*self.m_level*100000

    @property
    def level(self):
        """
        :return: self.m_level - the level of the colony, an int that relates to a flavour 'size'
        (outpost, colony, settlement)
        :rtype : int
        """
        return self.m_level

    @level.setter
    def level(self, i_level):
        """
        :param i_level: the level to set the colony to
        :type i_level: int
        """
        self.m_level = i_level

    @property
    def population(self):
        """
        :return: self.m_population - the population of the colony
        :rtype : int
        """
        return self.m_population

    @property
    def production(self):
        """
        :return: self.m_production - the amount of production generated by the colony
        :rtype : float
        """
        return self.m_production